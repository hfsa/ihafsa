{"ast":null,"code":"import _objectSpread from\"/Users/hafsa/Desktop/ihafsa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/hafsa/Desktop/ihafsa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/hafsa/Desktop/ihafsa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import ToDo from\"./ToDo\";import\"./styles.css\";export default function ToDoList(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),items=_useState2[0],setItems=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),newItemText=_useState4[0],setNewItemText=_useState4[1];//const [displayActiveItems, setDisplayActiveItems] = useState([]);\nvar _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),allItems=_useState6[0],setAllItems=_useState6[1];var activeItems=allItems.filter(function(item){return!item.done;});// total 7 handler functions\n// 3 for individual todo items - 1 for onchange(mzkin it controlled input), deleting, editing\n// the above functions are passed as props to ToDo component\n// 3 for inputtype text component- 1 for onchange(controlled), adding, helper function\n// 1 for clear complete button\n// Start of individual todo item handlers\n// handle change is for capturing every letter user types\n// while editing the todo inidividual item  its a controlled input/component\n// and conditionally rendered only when user has already added a todo item and double clicked on it\n// to edit it.\nvar handleChange=function handleChange(item){var index=items.indexOf(item);var newItems=_toConsumableArray(items);newItems[index]=_objectSpread(_objectSpread({},item),{},{// i don;t know he is toggling the done while editing/doublclicking the item\ndone:!item.done});setItems(newItems);setAllItems(newItems);};//change text is for editing the todo item and making it permanent(onclick)\nvar changeText=function changeText(item,text){var index=items.indexOf(item);var newItems=_toConsumableArray(items);newItems[index]=_objectSpread(_objectSpread({},item),{},{text:text});setItems(newItems);setAllItems(newItems);};// handle delete is for deleting the todo item by\n// clicking on x button on right side of todo item.\nvar handleDelete=function handleDelete(item){// its better to perform the below by storing the operation\n// in another variable and then providing that to setItems\nsetItems(items.filter(function(current){return current!==item;}));setAllItems(allItems.filter(function(current){return current!==item;}));};// End of handler functions for inididual todo items\n// Start handler functions for input component for entering/adding todo items\n// this add item function is not assigned/called from any html element\n// but handlformsubmit function call its- so its called helper function\n//refer to handleforsubmit function and see its being called there\nvar addItem=function addItem(text){if(text.length===0){return;}var newItem={id:\"\".concat(+new Date()),// for every new item added - done by default is added as false\ndone:false,text:text};setItems([].concat(_toConsumableArray(items),[newItem]));setAllItems([].concat(_toConsumableArray(allItems),[newItem]));setNewItemText(\"\");};// handleformsubmit is for pressing the enter button on input type\n// to add the item to todolist\nvar handleFormSubmit=function handleFormSubmit(event){event.preventDefault();addItem(newItemText);};// this function makes the input type for adding todo list as controlled\n// as it captures every keystroke and sets in our state\nvar handleNewItemTextChange=function handleNewItemTextChange(event){// its better to perform the below by storing the operation\n// in another variable and then providing that to setItems\nsetNewItemText(event.target.value);};// End of handler functions for input type element/component for\n// adding todo items\nvar handleKeyPress=function handleKeyPress(e){// e.preventDefault();\nif(e.key===\"Enter\"){addItem(newItemText);}};// clear trigger is completed when user clicks on cler completed button/text\nvar clearCompleted=function clearCompleted(){// its better to perform the below by storing the operation\n// in another variable and then providing that to setItems\nsetItems(items.filter(function(item){return!item.done;}));setAllItems(allItems.filter(function(item){return!item.done;}));};var allHandler=function allHandler(){setItems(allItems);};var activeHandler=function activeHandler(){var activeItems=allItems.filter(function(item){return!item.done;});console.log(activeItems,\"inside active items\");setItems(activeItems);};var completeHandler=function completeHandler(){var completedItems=allItems.filter(function(item){return item.done;});setItems(completedItems);};return/*#__PURE__*/React.createElement(\"section\",{className:\"todoapp\"},/*#__PURE__*/React.createElement(\"header\",{className:\"header\"},/*#__PURE__*/React.createElement(\"h1\",null,\"todos\"),/*#__PURE__*/React.createElement(\"input\",{//  onKeyPress={handleEnter}\n// this event handler function couldn't be found even in the original\n// however this input type is wrapped  in a Form that has a event (handleFormsbmit)\n// that is activating on enter(submit) to add the typed todo into our state.\nclassName:\"new-todo\",placeholder:\"What needs to be done?\",autoFocus:\"\",value:newItemText,onChange:handleNewItemTextChange,onKeyPress:handleKeyPress})),/*#__PURE__*/React.createElement(\"section\",{className:\"main\"},/*#__PURE__*/React.createElement(\"input\",{id:\"toggle-all\",className:\"toggle-all\",type:\"checkbox\"}),/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"toggle-all\"},\"Mark all as complete\"),/*#__PURE__*/React.createElement(\"ul\",{className:\"todo-list\"},items.map(function(item){return/*#__PURE__*/React.createElement(ToDo,{key:item.id,id:item.id,text:item.text,done:item.done,onChange:function onChange(){return handleChange(item);},onDelete:function onDelete(){return handleDelete(item);},onTextChanged:function onTextChanged(text){return changeText(item,text);}});}))),/*#__PURE__*/React.createElement(\"footer\",{className:\"footer\"},/*#__PURE__*/React.createElement(\"span\",{className:\"todo-count\"},/*#__PURE__*/React.createElement(\"strong\",null,activeItems.length),\" item left\"),/*#__PURE__*/React.createElement(\"ul\",{className:\"filters\"},/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:allHandler,className:\"selected\"},\"All\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:activeHandler},\"Active\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:completeHandler},\"Completed\"))),/*#__PURE__*/React.createElement(\"button\",{onClick:clearCompleted,className:\"clear-completed\"},\"Clear completed\")));}","map":{"version":3,"sources":["/Users/hafsa/Desktop/ihafsa/src/ToDoList.js"],"names":["React","useState","ToDo","ToDoList","items","setItems","newItemText","setNewItemText","allItems","setAllItems","activeItems","filter","item","done","handleChange","index","indexOf","newItems","changeText","text","handleDelete","current","addItem","length","newItem","id","Date","handleFormSubmit","event","preventDefault","handleNewItemTextChange","target","value","handleKeyPress","e","key","clearCompleted","allHandler","activeHandler","console","log","completeHandler","completedItems","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ToDo from \"./ToDo\";\nimport \"./styles.css\";\n\nexport default function ToDoList() {\n  const [items, setItems] = useState([]);\n  const [newItemText, setNewItemText] = useState(\"\");\n  //const [displayActiveItems, setDisplayActiveItems] = useState([]);\n  const [allItems, setAllItems] = useState([]);\n  const activeItems = allItems.filter((item) => !item.done);\n  // total 7 handler functions\n  // 3 for individual todo items - 1 for onchange(mzkin it controlled input), deleting, editing\n  // the above functions are passed as props to ToDo component\n  // 3 for inputtype text component- 1 for onchange(controlled), adding, helper function\n  // 1 for clear complete button\n\n  // Start of individual todo item handlers\n\n  // handle change is for capturing every letter user types\n  // while editing the todo inidividual item  its a controlled input/component\n  // and conditionally rendered only when user has already added a todo item and double clicked on it\n  // to edit it.\n\n  const handleChange = (item) => {\n    const index = items.indexOf(item);\n    const newItems = [...items];\n    newItems[index] = {\n      ...item,\n      // i don;t know he is toggling the done while editing/doublclicking the item\n      done: !item.done\n    };\n\n    setItems(newItems);\n    setAllItems(newItems);\n  };\n\n  //change text is for editing the todo item and making it permanent(onclick)\n  const changeText = (item, text) => {\n    const index = items.indexOf(item);\n    const newItems = [...items];\n    newItems[index] = {\n      ...item,\n      text\n    };\n\n    setItems(newItems);\n    setAllItems(newItems);\n  };\n\n  // handle delete is for deleting the todo item by\n  // clicking on x button on right side of todo item.\n  const handleDelete = (item) => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setItems(items.filter((current) => current !== item));\n    setAllItems(allItems.filter((current) => current !== item));\n  };\n\n  // End of handler functions for inididual todo items\n\n  // Start handler functions for input component for entering/adding todo items\n  // this add item function is not assigned/called from any html element\n  // but handlformsubmit function call its- so its called helper function\n  //refer to handleforsubmit function and see its being called there\n  const addItem = (text) => {\n    if (text.length === 0) {\n      return;\n    }\n    const newItem = {\n      id: `${+new Date()}`,\n      // for every new item added - done by default is added as false\n      done: false,\n      text\n    };\n\n    setItems([...items, newItem]);\n    setAllItems([...allItems, newItem]);\n    setNewItemText(\"\");\n  };\n\n  // handleformsubmit is for pressing the enter button on input type\n  // to add the item to todolist\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    addItem(newItemText);\n  };\n\n  // this function makes the input type for adding todo list as controlled\n  // as it captures every keystroke and sets in our state\n  const handleNewItemTextChange = (event) => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setNewItemText(event.target.value);\n  };\n  // End of handler functions for input type element/component for\n  // adding todo items\n\n  const handleKeyPress = (e) => {\n    // e.preventDefault();\n    if (e.key === \"Enter\") {\n      addItem(newItemText);\n    }\n  };\n  // clear trigger is completed when user clicks on cler completed button/text\n  const clearCompleted = () => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setItems(items.filter((item) => !item.done));\n    setAllItems(allItems.filter((item) => !item.done));\n  };\n\n  const allHandler = () => {\n    setItems(allItems);\n  };\n\n  const activeHandler = () => {\n    let activeItems = allItems.filter((item) => !item.done);\n    console.log(activeItems, \"inside active items\");\n    setItems(activeItems);\n  };\n  const completeHandler = () => {\n    let completedItems = allItems.filter((item) => item.done);\n    setItems(completedItems);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        {/* <form onSubmit={handleFormSubmit}> */}\n        <input\n          //  onKeyPress={handleEnter}\n          // this event handler function couldn't be found even in the original\n          // however this input type is wrapped  in a Form that has a event (handleFormsbmit)\n          // that is activating on enter(submit) to add the typed todo into our state.\n\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          autoFocus=\"\"\n          value={newItemText}\n          onChange={handleNewItemTextChange}\n          onKeyPress={handleKeyPress}\n        />\n        {/* </form> */}\n      </header>\n\n      <section className=\"main\">\n        <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {items.map((item) => (\n            <ToDo\n              key={item.id}\n              id={item.id}\n              text={item.text}\n              done={item.done}\n              onChange={() => handleChange(item)}\n              onDelete={() => handleDelete(item)}\n              onTextChanged={(text) => changeText(item, text)}\n            />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{activeItems.length}</strong> item left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <button onClick={allHandler} className=\"selected\">\n              All\n            </button>\n          </li>\n          <li>\n            <button onClick={activeHandler}>Active</button>\n          </li>\n          <li>\n            <button onClick={completeHandler}>Completed</button>\n          </li>\n        </ul>\n        <button onClick={clearCompleted} className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}"]},"metadata":{},"sourceType":"module"}