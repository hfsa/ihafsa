{"ast":null,"code":"var _jsxFileName = \"/Users/hafsa/Desktop/ihafsa/src/ToDo.js\";\nimport React, { useState } from \"react\";\nimport \"./styles.css\";\nexport default function ToDo(props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const {\n    id,\n    done,\n    text,\n    onChange,\n    onDelete,\n    onTextChanged\n  } = props;\n  const classes = []; // ---- start of classes manipulation\n  // conditional application of class when user finished editing\n\n  if (done) {\n    classes.push(\"completed\");\n  } // conditional application of class when user wants to start editing\n\n\n  if (isEditing) {\n    classes.push(\"editing\");\n  } // end class manipulation\n  // this start editing handler will make the boolean true to render editing comonent/input\n  // also will temporarily hold the value in state till user makes it permanent by clicking on enter button after editing\n\n\n  const startEditing = () => {\n    setIsEditing(true);\n    setCurrentValue(text);\n  }; // this function makes it permanent whatever the user has edited the value after user\n  // presses enter button\n\n\n  const handleTextChange = event => {\n    if (event.key !== \"Enter\") {\n      return;\n    } // this props.ontextchanged methods sends back the value to parent component todolist\n    // as well as hides the editing component\n\n\n    onTextChanged(currentValue);\n    setCurrentValue(\"\");\n    setIsEditing(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    onDoubleClick: startEditing,\n    className: classes.join(\" \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: `todo-${id}`,\n    className: \"toggle\",\n    type: \"checkbox\",\n    checked: done,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: `todo-${id}`,\n    className: \"label-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, text), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"destroy\",\n    onClick: onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), isEditing && /*#__PURE__*/React.createElement(\"input\", {\n    onKeyPress: handleTextChange,\n    value: currentValue,\n    onChange: event => setCurrentValue(event.target.value),\n    type: \"text\",\n    className: \"edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/hafsa/Desktop/ihafsa/src/ToDo.js"],"names":["React","useState","ToDo","props","isEditing","setIsEditing","currentValue","setCurrentValue","id","done","text","onChange","onDelete","onTextChanged","classes","push","startEditing","handleTextChange","event","key","join","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,cAAP;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAEO,IAAAA,EAAF;AAAMC,IAAAA,IAAN;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA;AAAtC,MAAwDV,KAA9D;AACA,QAAMW,OAAO,GAAG,EAAhB,CAJkC,CAMlC;AACA;;AACA,MAAIL,IAAJ,EAAU;AACRK,IAAAA,OAAO,CAACC,IAAR,CAAa,WAAb;AACD,GAViC,CAWlC;;;AAEA,MAAIX,SAAJ,EAAe;AACbU,IAAAA,OAAO,CAACC,IAAR,CAAa,SAAb;AACD,GAfiC,CAgBlC;AAEA;AACA;;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACzBX,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,eAAe,CAACG,IAAD,CAAf;AACD,GAHD,CArBkC,CA0BlC;AACA;;;AACA,QAAMO,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzB;AACD,KAHiC,CAIlC;AACA;;;AACAN,IAAAA,aAAa,CAACP,YAAD,CAAb;AACAC,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GATD;;AAUA,sBACE;AAAI,IAAA,aAAa,EAAEW,YAAnB;AAAiC,IAAA,SAAS,EAAEF,OAAO,CAACM,IAAR,CAAa,GAAb,CAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAG,QAAOZ,EAAG,EADjB;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,OAAO,EAAEC,IAJX;AAKE,IAAA,QAAQ,EAAEE,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE;AAAO,IAAA,OAAO,EAAG,QAAOH,EAAG,EAA3B;AAA8B,IAAA,SAAS,EAAC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,IADH,CARF,eAWE;AAAQ,IAAA,SAAS,EAAC,SAAlB;AAA4B,IAAA,OAAO,EAAEE,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF,EAmBGR,SAAS,iBACR;AACE,IAAA,UAAU,EAAEa,gBADd;AAEE,IAAA,KAAK,EAAEX,YAFT;AAGE,IAAA,QAAQ,EAAGY,KAAD,IAAWX,eAAe,CAACW,KAAK,CAACG,MAAN,CAAaC,KAAd,CAHtC;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,SAAS,EAAC,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBJ,CADF;AA+BD","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function ToDo(props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const { id, done, text, onChange, onDelete, onTextChanged } = props;\n  const classes = [];\n\n  // ---- start of classes manipulation\n  // conditional application of class when user finished editing\n  if (done) {\n    classes.push(\"completed\");\n  }\n  // conditional application of class when user wants to start editing\n\n  if (isEditing) {\n    classes.push(\"editing\");\n  }\n  // end class manipulation\n\n  // this start editing handler will make the boolean true to render editing comonent/input\n  // also will temporarily hold the value in state till user makes it permanent by clicking on enter button after editing\n\n  const startEditing = () => {\n    setIsEditing(true);\n    setCurrentValue(text);\n  };\n\n  // this function makes it permanent whatever the user has edited the value after user\n  // presses enter button\n  const handleTextChange = (event) => {\n    if (event.key !== \"Enter\") {\n      return;\n    }\n    // this props.ontextchanged methods sends back the value to parent component todolist\n    // as well as hides the editing component\n    onTextChanged(currentValue);\n    setCurrentValue(\"\");\n    setIsEditing(false);\n  };\n  return (\n    <li onDoubleClick={startEditing} className={classes.join(\" \")}>\n      <div className=\"view\">\n        <input\n          id={`todo-${id}`}\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={done}\n          onChange={onChange}\n        />\n        <label htmlFor={`todo-${id}`} className=\"label-text\">\n          {text}\n        </label>\n        <button className=\"destroy\" onClick={onDelete} />\n      </div>\n\n      {/* this editing section will only be shown when user is editing\n      the todo item..otherwise it will not be shown\n      see how isEditing boolean is used to hide/show it based on\n      whether user has double clicked to edit a todo item  */}\n      {isEditing && (\n        <input\n          onKeyPress={handleTextChange}\n          value={currentValue}\n          onChange={(event) => setCurrentValue(event.target.value)}\n          type=\"text\"\n          className=\"edit\"\n        />\n      )}\n    </li>\n  );\n}"]},"metadata":{},"sourceType":"module"}