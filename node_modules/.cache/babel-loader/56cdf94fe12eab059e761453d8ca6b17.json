{"ast":null,"code":"var _jsxFileName = \"/Users/hafsa/Desktop/ihafsa/src/ToDoList.js\";\nimport React, { useState } from \"react\";\nimport ToDo from \"./ToDo\";\nimport \"./styles.css\";\nexport default function ToDoList() {\n  const [items, setItems] = useState([]);\n  const [newItemText, setNewItemText] = useState(\"\"); //const [displayActiveItems, setDisplayActiveItems] = useState([]);\n\n  const [allItems, setAllItems] = useState([]);\n  const activeItems = allItems.filter(item => !item.done); // total 7 handler functions\n  // 3 for individual todo items - 1 for onchange(mzkin it controlled input), deleting, editing\n  // the above functions are passed as props to ToDo component\n  // 3 for inputtype text component- 1 for onchange(controlled), adding, helper function\n  // 1 for clear complete button\n  // Start of individual todo item handlers\n  // handle change is for capturing every letter user types\n  // while editing the todo inidividual item  its a controlled input/component\n  // and conditionally rendered only when user has already added a todo item and double clicked on it\n  // to edit it.\n\n  const handleChange = item => {\n    const index = items.indexOf(item);\n    const newItems = [...items];\n    newItems[index] = { ...item,\n      // i don;t know he is toggling the done while editing/doublclicking the item\n      done: !item.done\n    };\n    setItems(newItems);\n    setAllItems(newItems);\n  }; //change text is for editing the todo item and making it permanent(onclick)\n\n\n  const changeText = (item, text) => {\n    const index = items.indexOf(item);\n    const newItems = [...items];\n    newItems[index] = { ...item,\n      text\n    };\n    setItems(newItems);\n    setAllItems(newItems);\n  }; // handle delete is for deleting the todo item by\n  // clicking on x button on right side of todo item.\n\n\n  const handleDelete = item => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setItems(items.filter(current => current !== item));\n    setAllItems(allItems.filter(current => current !== item));\n  }; // End of handler functions for inididual todo items\n  // Start handler functions for input component for entering/adding todo items\n  // this add item function is not assigned/called from any html element\n  // but handlformsubmit function call its- so its called helper function\n  //refer to handleforsubmit function and see its being called there\n\n\n  const addItem = text => {\n    if (text.length === 0) {\n      return;\n    }\n\n    const newItem = {\n      id: `${+new Date()}`,\n      // for every new item added - done by default is added as false\n      done: false,\n      text\n    };\n    setItems([...items, newItem]);\n    setAllItems([...allItems, newItem]);\n    setNewItemText(\"\");\n  }; // handleformsubmit is for pressing the enter button on input type\n  // to add the item to todolist\n\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    addItem(newItemText);\n  }; // this function makes the input type for adding todo list as controlled\n  // as it captures every keystroke and sets in our state\n\n\n  const handleNewItemTextChange = event => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setNewItemText(event.target.value);\n  }; // End of handler functions for input type element/component for\n  // adding todo items\n\n\n  const handleKeyPress = e => {\n    // e.preventDefault();\n    if (e.key === \"Enter\") {\n      addItem(newItemText);\n    }\n  }; // clear trigger is completed when user clicks on cler completed button/text\n\n\n  const clearCompleted = () => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setItems(items.filter(item => !item.done));\n    setAllItems(allItems.filter(item => !item.done));\n  };\n\n  const allHandler = () => {\n    setItems(allItems);\n  };\n\n  const activeHandler = () => {\n    let activeItems = allItems.filter(item => !item.done);\n    console.log(activeItems, \"inside active items\");\n    setItems(activeItems);\n  };\n\n  const completeHandler = () => {\n    let completedItems = allItems.filter(item => item.done);\n    setItems(completedItems);\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todoapp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, \"todos\"), /*#__PURE__*/React.createElement(\"input\", {\n    //  onKeyPress={handleEnter}\n    // this event handler function couldn't be found even in the original\n    // however this input type is wrapped  in a Form that has a event (handleFormsbmit)\n    // that is activating on enter(submit) to add the typed todo into our state.\n    className: \"new-todo\",\n    placeholder: \"What needs to be done?\",\n    autoFocus: \"\",\n    value: newItemText,\n    onChange: handleNewItemTextChange,\n    onKeyPress: handleKeyPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"toggle-all\",\n    className: \"toggle-all\",\n    type: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"toggle-all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, \"Mark all as complete\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"todo-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, items.map(item => /*#__PURE__*/React.createElement(ToDo, {\n    key: item.id,\n    id: item.id,\n    text: item.text,\n    done: item.done,\n    onChange: () => handleChange(item),\n    onDelete: () => handleDelete(item),\n    onTextChanged: text => changeText(item, text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"footer\", {\n    className: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"todo-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, activeItems.length), \" item left\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"filters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: allHandler,\n    className: \"selected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, \"All\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: activeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Active\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: completeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, \"Completed\"))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearCompleted,\n    className: \"clear-completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"Clear completed\")));\n}","map":{"version":3,"sources":["/Users/hafsa/Desktop/ihafsa/src/ToDoList.js"],"names":["React","useState","ToDo","ToDoList","items","setItems","newItemText","setNewItemText","allItems","setAllItems","activeItems","filter","item","done","handleChange","index","indexOf","newItems","changeText","text","handleDelete","current","addItem","length","newItem","id","Date","handleFormSubmit","event","preventDefault","handleNewItemTextChange","target","value","handleKeyPress","e","key","clearCompleted","allHandler","activeHandler","console","log","completeHandler","completedItems","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ToDo from \"./ToDo\";\nimport \"./styles.css\";\n\nexport default function ToDoList() {\n  const [items, setItems] = useState([]);\n  const [newItemText, setNewItemText] = useState(\"\");\n  //const [displayActiveItems, setDisplayActiveItems] = useState([]);\n  const [allItems, setAllItems] = useState([]);\n  const activeItems = allItems.filter((item) => !item.done);\n  // total 7 handler functions\n  // 3 for individual todo items - 1 for onchange(mzkin it controlled input), deleting, editing\n  // the above functions are passed as props to ToDo component\n  // 3 for inputtype text component- 1 for onchange(controlled), adding, helper function\n  // 1 for clear complete button\n\n  // Start of individual todo item handlers\n\n  // handle change is for capturing every letter user types\n  // while editing the todo inidividual item  its a controlled input/component\n  // and conditionally rendered only when user has already added a todo item and double clicked on it\n  // to edit it.\n\n  const handleChange = (item) => {\n    const index = items.indexOf(item);\n    const newItems = [...items];\n    newItems[index] = {\n      ...item,\n      // i don;t know he is toggling the done while editing/doublclicking the item\n      done: !item.done\n    };\n\n    setItems(newItems);\n    setAllItems(newItems);\n  };\n\n  //change text is for editing the todo item and making it permanent(onclick)\n  const changeText = (item, text) => {\n    const index = items.indexOf(item);\n    const newItems = [...items];\n    newItems[index] = {\n      ...item,\n      text\n    };\n\n    setItems(newItems);\n    setAllItems(newItems);\n  };\n\n  // handle delete is for deleting the todo item by\n  // clicking on x button on right side of todo item.\n  const handleDelete = (item) => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setItems(items.filter((current) => current !== item));\n    setAllItems(allItems.filter((current) => current !== item));\n  };\n\n  // End of handler functions for inididual todo items\n\n  // Start handler functions for input component for entering/adding todo items\n  // this add item function is not assigned/called from any html element\n  // but handlformsubmit function call its- so its called helper function\n  //refer to handleforsubmit function and see its being called there\n  const addItem = (text) => {\n    if (text.length === 0) {\n      return;\n    }\n    const newItem = {\n      id: `${+new Date()}`,\n      // for every new item added - done by default is added as false\n      done: false,\n      text\n    };\n\n    setItems([...items, newItem]);\n    setAllItems([...allItems, newItem]);\n    setNewItemText(\"\");\n  };\n\n  // handleformsubmit is for pressing the enter button on input type\n  // to add the item to todolist\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    addItem(newItemText);\n  };\n\n  // this function makes the input type for adding todo list as controlled\n  // as it captures every keystroke and sets in our state\n  const handleNewItemTextChange = (event) => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setNewItemText(event.target.value);\n  };\n  // End of handler functions for input type element/component for\n  // adding todo items\n\n  const handleKeyPress = (e) => {\n    // e.preventDefault();\n    if (e.key === \"Enter\") {\n      addItem(newItemText);\n    }\n  };\n  // clear trigger is completed when user clicks on cler completed button/text\n  const clearCompleted = () => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setItems(items.filter((item) => !item.done));\n    setAllItems(allItems.filter((item) => !item.done));\n  };\n\n  const allHandler = () => {\n    setItems(allItems);\n  };\n\n  const activeHandler = () => {\n    let activeItems = allItems.filter((item) => !item.done);\n    console.log(activeItems, \"inside active items\");\n    setItems(activeItems);\n  };\n  const completeHandler = () => {\n    let completedItems = allItems.filter((item) => item.done);\n    setItems(completedItems);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        {/* <form onSubmit={handleFormSubmit}> */}\n        <input\n          //  onKeyPress={handleEnter}\n          // this event handler function couldn't be found even in the original\n          // however this input type is wrapped  in a Form that has a event (handleFormsbmit)\n          // that is activating on enter(submit) to add the typed todo into our state.\n\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          autoFocus=\"\"\n          value={newItemText}\n          onChange={handleNewItemTextChange}\n          onKeyPress={handleKeyPress}\n        />\n        {/* </form> */}\n      </header>\n\n      <section className=\"main\">\n        <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {items.map((item) => (\n            <ToDo\n              key={item.id}\n              id={item.id}\n              text={item.text}\n              done={item.done}\n              onChange={() => handleChange(item)}\n              onDelete={() => handleDelete(item)}\n              onTextChanged={(text) => changeText(item, text)}\n            />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{activeItems.length}</strong> item left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <button onClick={allHandler} className=\"selected\">\n              All\n            </button>\n          </li>\n          <li>\n            <button onClick={activeHandler}>Active</button>\n          </li>\n          <li>\n            <button onClick={completeHandler}>Completed</button>\n          </li>\n        </ul>\n        <button onClick={clearCompleted} className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}"]},"metadata":{},"sourceType":"module"}