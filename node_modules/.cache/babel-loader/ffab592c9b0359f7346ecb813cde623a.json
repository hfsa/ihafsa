{"ast":null,"code":"import _slicedToArray from\"/Users/hafsa/Desktop/ihafsa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import\"./styles.css\";export default function ToDo(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isEditing=_useState2[0],setIsEditing=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),currentValue=_useState4[0],setCurrentValue=_useState4[1];var id=props.id,done=props.done,text=props.text,onChange=props.onChange,onDelete=props.onDelete,onTextChanged=props.onTextChanged;var classes=[];// ---- start of classes manipulation\n// conditional application of class when user finished editing\nif(done){classes.push(\"completed\");}// conditional application of class when user wants to start editing\nif(isEditing){classes.push(\"editing\");}// end class manipulation\n// this start editing handler will make the boolean true to render editing comonent/input\n// also will temporarily hold the value in state till user makes it permanent by clicking on enter button after editing\nvar startEditing=function startEditing(){setIsEditing(true);setCurrentValue(text);};// this function makes it permanent whatever the user has edited the value after user\n// presses enter button\nvar handleTextChange=function handleTextChange(event){if(event.key!==\"Enter\"){return;}// this props.ontextchanged methods sends back the value to parent component todolist\n// as well as hides the editing component\nonTextChanged(currentValue);setCurrentValue(\"\");setIsEditing(false);};return/*#__PURE__*/React.createElement(\"li\",{onDoubleClick:startEditing,className:classes.join(\" \")},/*#__PURE__*/React.createElement(\"div\",{className:\"view\"},/*#__PURE__*/React.createElement(\"input\",{id:\"todo-\".concat(id),className:\"toggle\",type:\"checkbox\",checked:done,onChange:onChange}),/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"todo-\".concat(id),className:\"label-text\"},text),/*#__PURE__*/React.createElement(\"button\",{className:\"destroy\",onClick:onDelete})),isEditing&&/*#__PURE__*/React.createElement(\"input\",{onKeyPress:handleTextChange,value:currentValue,onChange:function onChange(event){return setCurrentValue(event.target.value);},type:\"text\",className:\"edit\"}));}","map":{"version":3,"sources":["/Users/hafsa/Desktop/ihafsa/src/ToDo.js"],"names":["React","useState","ToDo","props","isEditing","setIsEditing","currentValue","setCurrentValue","id","done","text","onChange","onDelete","onTextChanged","classes","push","startEditing","handleTextChange","event","key","join","target","value"],"mappings":"kJAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAO,cAAP,CAEA,cAAe,SAASC,CAAAA,IAAT,CAAcC,KAAd,CAAqB,eACAF,QAAQ,CAAC,KAAD,CADR,wCAC3BG,SAD2B,eAChBC,YADgB,8BAEMJ,QAAQ,CAAC,EAAD,CAFd,yCAE3BK,YAF2B,eAEbC,eAFa,kBAG1BC,CAAAA,EAH0B,CAG4BL,KAH5B,CAG1BK,EAH0B,CAGtBC,IAHsB,CAG4BN,KAH5B,CAGtBM,IAHsB,CAGhBC,IAHgB,CAG4BP,KAH5B,CAGhBO,IAHgB,CAGVC,QAHU,CAG4BR,KAH5B,CAGVQ,QAHU,CAGAC,QAHA,CAG4BT,KAH5B,CAGAS,QAHA,CAGUC,aAHV,CAG4BV,KAH5B,CAGUU,aAHV,CAIlC,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CAEA;AACA;AACA,GAAIL,IAAJ,CAAU,CACRK,OAAO,CAACC,IAAR,CAAa,WAAb,EACD,CACD;AAEA,GAAIX,SAAJ,CAAe,CACbU,OAAO,CAACC,IAAR,CAAa,SAAb,EACD,CACD;AAEA;AACA;AAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzBX,YAAY,CAAC,IAAD,CAAZ,CACAE,eAAe,CAACG,IAAD,CAAf,CACD,CAHD,CAKA;AACA;AACA,GAAMO,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAW,CAClC,GAAIA,KAAK,CAACC,GAAN,GAAc,OAAlB,CAA2B,CACzB,OACD,CACD;AACA;AACAN,aAAa,CAACP,YAAD,CAAb,CACAC,eAAe,CAAC,EAAD,CAAf,CACAF,YAAY,CAAC,KAAD,CAAZ,CACD,CATD,CAUA,mBACE,0BAAI,aAAa,CAAEW,YAAnB,CAAiC,SAAS,CAAEF,OAAO,CAACM,IAAR,CAAa,GAAb,CAA5C,eACE,2BAAK,SAAS,CAAC,MAAf,eACE,6BACE,EAAE,gBAAUZ,EAAV,CADJ,CAEE,SAAS,CAAC,QAFZ,CAGE,IAAI,CAAC,UAHP,CAIE,OAAO,CAAEC,IAJX,CAKE,QAAQ,CAAEE,QALZ,EADF,cAQE,6BAAO,OAAO,gBAAUH,EAAV,CAAd,CAA8B,SAAS,CAAC,YAAxC,EACGE,IADH,CARF,cAWE,8BAAQ,SAAS,CAAC,SAAlB,CAA4B,OAAO,CAAEE,QAArC,EAXF,CADF,CAmBGR,SAAS,eACR,6BACE,UAAU,CAAEa,gBADd,CAEE,KAAK,CAAEX,YAFT,CAGE,QAAQ,CAAE,kBAACY,KAAD,QAAWX,CAAAA,eAAe,CAACW,KAAK,CAACG,MAAN,CAAaC,KAAd,CAA1B,EAHZ,CAIE,IAAI,CAAC,MAJP,CAKE,SAAS,CAAC,MALZ,EApBJ,CADF,CA+BD","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function ToDo(props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const { id, done, text, onChange, onDelete, onTextChanged } = props;\n  const classes = [];\n\n  // ---- start of classes manipulation\n  // conditional application of class when user finished editing\n  if (done) {\n    classes.push(\"completed\");\n  }\n  // conditional application of class when user wants to start editing\n\n  if (isEditing) {\n    classes.push(\"editing\");\n  }\n  // end class manipulation\n\n  // this start editing handler will make the boolean true to render editing comonent/input\n  // also will temporarily hold the value in state till user makes it permanent by clicking on enter button after editing\n\n  const startEditing = () => {\n    setIsEditing(true);\n    setCurrentValue(text);\n  };\n\n  // this function makes it permanent whatever the user has edited the value after user\n  // presses enter button\n  const handleTextChange = (event) => {\n    if (event.key !== \"Enter\") {\n      return;\n    }\n    // this props.ontextchanged methods sends back the value to parent component todolist\n    // as well as hides the editing component\n    onTextChanged(currentValue);\n    setCurrentValue(\"\");\n    setIsEditing(false);\n  };\n  return (\n    <li onDoubleClick={startEditing} className={classes.join(\" \")}>\n      <div className=\"view\">\n        <input\n          id={`todo-${id}`}\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={done}\n          onChange={onChange}\n        />\n        <label htmlFor={`todo-${id}`} className=\"label-text\">\n          {text}\n        </label>\n        <button className=\"destroy\" onClick={onDelete} />\n      </div>\n\n      {/* this editing section will only be shown when user is editing\n      the todo item..otherwise it will not be shown\n      see how isEditing boolean is used to hide/show it based on\n      whether user has double clicked to edit a todo item  */}\n      {isEditing && (\n        <input\n          onKeyPress={handleTextChange}\n          value={currentValue}\n          onChange={(event) => setCurrentValue(event.target.value)}\n          type=\"text\"\n          className=\"edit\"\n        />\n      )}\n    </li>\n  );\n}"]},"metadata":{},"sourceType":"module"}