{"version":3,"sources":["ToDo.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","props","useState","isEditing","setIsEditing","currentValue","setCurrentValue","id","done","text","onChange","onDelete","onTextChanged","classes","push","onDoubleClick","className","join","type","checked","htmlFor","onClick","onKeyPress","event","key","value","target","ToDoList","items","setItems","newItemText","setNewItemText","allItems","setAllItems","activeItems","filter","item","addItem","length","newItem","Date","placeholder","autoFocus","e","map","index","indexOf","newItems","handleChange","current","handleDelete","changeText","console","log","completedItems","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mMAGe,SAASA,EAAKC,GAAQ,IAAD,EACAC,oBAAS,GADT,mBAC3BC,EAD2B,KAChBC,EADgB,OAEMF,mBAAS,IAFf,mBAE3BG,EAF2B,KAEbC,EAFa,KAG1BC,EAAsDN,EAAtDM,GAAIC,EAAkDP,EAAlDO,KAAMC,EAA4CR,EAA5CQ,KAAMC,EAAsCT,EAAtCS,SAAUC,EAA4BV,EAA5BU,SAAUC,EAAkBX,EAAlBW,cACtCC,EAAU,GAIZL,GACFK,EAAQC,KAAK,aAIXX,GACFU,EAAQC,KAAK,WAwBf,OACE,wBAAIC,cAlBe,WACnBX,GAAa,GACbE,EAAgBG,IAgBiBO,UAAWH,EAAQI,KAAK,MACvD,yBAAKD,UAAU,QACb,2BACET,GAAE,eAAUA,GACZS,UAAU,SACVE,KAAK,WACLC,QAASX,EACTE,SAAUA,IAEZ,2BAAOU,QAAO,eAAUb,GAAMS,UAAU,cACrCP,GAEH,4BAAQO,UAAU,UAAUK,QAASV,KAOtCR,GACC,2BACEmB,WAhCiB,SAACC,GACN,UAAdA,EAAMC,MAKVZ,EAAcP,GACdC,EAAgB,IAChBF,GAAa,KAyBPqB,MAAOpB,EACPK,SAAU,SAACa,GAAD,OAAWjB,EAAgBiB,EAAMG,OAAOD,QAClDP,KAAK,OACLF,UAAU,UC/DL,SAASW,IAAY,IAAD,EACPzB,mBAAS,IADF,mBAC1B0B,EAD0B,KACnBC,EADmB,OAEK3B,mBAAS,IAFd,mBAE1B4B,EAF0B,KAEbC,EAFa,OAID7B,mBAAS,IAJR,mBAI1B8B,EAJ0B,KAIhBC,EAJgB,KAK3BC,EAAcF,EAASG,QAAO,SAACC,GAAD,OAAWA,EAAK5B,QAuD9C6B,EAAU,SAAC5B,GACf,GAAoB,IAAhBA,EAAK6B,OAAT,CAGA,IAAMC,EAAU,CACdhC,GAAG,GAAD,QAAM,IAAIiC,MAEZhC,MAAM,EACNC,QAGFoB,EAAS,GAAD,mBAAKD,GAAL,CAAYW,KACpBN,EAAY,GAAD,mBAAKD,GAAL,CAAeO,KAC1BR,EAAe,MAiDjB,OACE,6BAASf,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,2BAMEA,UAAU,WACVyB,YAAY,yBACZC,UAAU,GACVjB,MAAOK,EACPpB,SAnDwB,SAACa,GAG/BQ,EAAeR,EAAMG,OAAOD,QAiDtBH,WA5Ce,SAACqB,GAER,UAAVA,EAAEnB,KACJa,EAAQP,OA8CR,6BAASd,UAAU,QACjB,2BAAOT,GAAG,aAAaS,UAAU,aAAaE,KAAK,aACnD,2BAAOE,QAAQ,cAAf,wBACA,wBAAIJ,UAAU,aACXY,EAAMgB,KAAI,SAACR,GAAD,OACT,kBAACpC,EAAD,CACEwB,IAAKY,EAAK7B,GACVA,GAAI6B,EAAK7B,GACTE,KAAM2B,EAAK3B,KACXD,KAAM4B,EAAK5B,KACXE,SAAU,kBAtID,SAAC0B,GACpB,IAAMS,EAAQjB,EAAMkB,QAAQV,GACtBW,EAAQ,YAAOnB,GACrBmB,EAASF,GAAT,2BACKT,GADL,IAGE5B,MAAO4B,EAAK5B,OAGdqB,EAASkB,GACTd,EAAYc,GA4HcC,CAAaZ,IAC7BzB,SAAU,kBA3GD,SAACyB,GAGpBP,EAASD,EAAMO,QAAO,SAACc,GAAD,OAAaA,IAAYb,MAC/CH,EAAYD,EAASG,QAAO,SAACc,GAAD,OAAaA,IAAYb,MAuG3Bc,CAAad,IAC7BxB,cAAe,SAACH,GAAD,OA1HR,SAAC2B,EAAM3B,GACxB,IAAMoC,EAAQjB,EAAMkB,QAAQV,GACtBW,EAAQ,YAAOnB,GACrBmB,EAASF,GAAT,2BACKT,GADL,IAEE3B,SAGFoB,EAASkB,GACTd,EAAYc,GAiHuBI,CAAWf,EAAM3B,WAMlD,4BAAQO,UAAU,UAChB,0BAAMA,UAAU,cACd,gCAASkB,EAAYI,QADvB,cAGA,wBAAItB,UAAU,WACZ,4BACE,4BAAQK,QA3DC,WACjBQ,EAASG,IA0D4BhB,UAAU,YAAvC,QAIF,4BACE,4BAAQK,QA5DI,WACpB,IAAIa,EAAcF,EAASG,QAAO,SAACC,GAAD,OAAWA,EAAK5B,QAClD4C,QAAQC,IAAInB,EAAa,uBACzBL,EAASK,KAyDD,WAEF,4BACE,4BAAQb,QA1DM,WACtB,IAAIiC,EAAiBtB,EAASG,QAAO,SAACC,GAAD,OAAUA,EAAK5B,QACpDqB,EAASyB,KAwDD,eAGJ,4BAAQjC,QA7ES,WAGrBQ,EAASD,EAAMO,QAAO,SAACC,GAAD,OAAWA,EAAK5B,SACtCyB,EAAYD,EAASG,QAAO,SAACC,GAAD,OAAWA,EAAK5B,UAyEPQ,UAAU,mBAA3C,qBC9KR,IAKeuC,EALH,kBACV,yBAAKvC,UAAU,OACb,kBAACW,EAAD,QCEgB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.3f1a31c0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function ToDo(props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const { id, done, text, onChange, onDelete, onTextChanged } = props;\n  const classes = [];\n\n  // ---- start of classes manipulation\n  // conditional application of class when user finished editing\n  if (done) {\n    classes.push(\"completed\");\n  }\n  // conditional application of class when user wants to start editing\n\n  if (isEditing) {\n    classes.push(\"editing\");\n  }\n  // end class manipulation\n\n  // this start editing handler will make the boolean true to render editing comonent/input\n  // also will temporarily hold the value in state till user makes it permanent by clicking on enter button after editing\n\n  const startEditing = () => {\n    setIsEditing(true);\n    setCurrentValue(text);\n  };\n\n  // this function makes it permanent whatever the user has edited the value after user\n  // presses enter button\n  const handleTextChange = (event) => {\n    if (event.key !== \"Enter\") {\n      return;\n    }\n    // this props.ontextchanged methods sends back the value to parent component todolist\n    // as well as hides the editing component\n    onTextChanged(currentValue);\n    setCurrentValue(\"\");\n    setIsEditing(false);\n  };\n  return (\n    <li onDoubleClick={startEditing} className={classes.join(\" \")}>\n      <div className=\"view\">\n        <input\n          id={`todo-${id}`}\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={done}\n          onChange={onChange}\n        />\n        <label htmlFor={`todo-${id}`} className=\"label-text\">\n          {text}\n        </label>\n        <button className=\"destroy\" onClick={onDelete} />\n      </div>\n\n      {/* this editing section will only be shown when user is editing\n      the todo item..otherwise it will not be shown\n      see how isEditing boolean is used to hide/show it based on\n      whether user has double clicked to edit a todo item  */}\n      {isEditing && (\n        <input\n          onKeyPress={handleTextChange}\n          value={currentValue}\n          onChange={(event) => setCurrentValue(event.target.value)}\n          type=\"text\"\n          className=\"edit\"\n        />\n      )}\n    </li>\n  );\n}","import React, { useState } from \"react\";\nimport ToDo from \"./ToDo\";\nimport \"./styles.css\";\n\nexport default function ToDoList() {\n  const [items, setItems] = useState([]);\n  const [newItemText, setNewItemText] = useState(\"\");\n  //const [displayActiveItems, setDisplayActiveItems] = useState([]);\n  const [allItems, setAllItems] = useState([]);\n  const activeItems = allItems.filter((item) => !item.done);\n  // total 7 handler functions\n  // 3 for individual todo items - 1 for onchange(mzkin it controlled input), deleting, editing\n  // the above functions are passed as props to ToDo component\n  // 3 for inputtype text component- 1 for onchange(controlled), adding, helper function\n  // 1 for clear complete button\n\n  // Start of individual todo item handlers\n\n  // handle change is for capturing every letter user types\n  // while editing the todo inidividual item  its a controlled input/component\n  // and conditionally rendered only when user has already added a todo item and double clicked on it\n  // to edit it.\n\n  const handleChange = (item) => {\n    const index = items.indexOf(item);\n    const newItems = [...items];\n    newItems[index] = {\n      ...item,\n      // i don;t know he is toggling the done while editing/doublclicking the item\n      done: !item.done\n    };\n\n    setItems(newItems);\n    setAllItems(newItems);\n  };\n\n  //change text is for editing the todo item and making it permanent(onclick)\n  const changeText = (item, text) => {\n    const index = items.indexOf(item);\n    const newItems = [...items];\n    newItems[index] = {\n      ...item,\n      text\n    };\n\n    setItems(newItems);\n    setAllItems(newItems);\n  };\n\n  // handle delete is for deleting the todo item by\n  // clicking on x button on right side of todo item.\n  const handleDelete = (item) => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setItems(items.filter((current) => current !== item));\n    setAllItems(allItems.filter((current) => current !== item));\n  };\n\n  // End of handler functions for inididual todo items\n\n  // Start handler functions for input component for entering/adding todo items\n  // this add item function is not assigned/called from any html element\n  // but handlformsubmit function call its- so its called helper function\n  //refer to handleforsubmit function and see its being called there\n  const addItem = (text) => {\n    if (text.length === 0) {\n      return;\n    }\n    const newItem = {\n      id: `${+new Date()}`,\n      // for every new item added - done by default is added as false\n      done: false,\n      text\n    };\n\n    setItems([...items, newItem]);\n    setAllItems([...allItems, newItem]);\n    setNewItemText(\"\");\n  };\n\n  // handleformsubmit is for pressing the enter button on input type\n  // to add the item to todolist\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    addItem(newItemText);\n  };\n\n  // this function makes the input type for adding todo list as controlled\n  // as it captures every keystroke and sets in our state\n  const handleNewItemTextChange = (event) => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setNewItemText(event.target.value);\n  };\n  // End of handler functions for input type element/component for\n  // adding todo items\n\n  const handleKeyPress = (e) => {\n    // e.preventDefault();\n    if (e.key === \"Enter\") {\n      addItem(newItemText);\n    }\n  };\n  // clear trigger is completed when user clicks on cler completed button/text\n  const clearCompleted = () => {\n    // its better to perform the below by storing the operation\n    // in another variable and then providing that to setItems\n    setItems(items.filter((item) => !item.done));\n    setAllItems(allItems.filter((item) => !item.done));\n  };\n\n  const allHandler = () => {\n    setItems(allItems);\n  };\n\n  const activeHandler = () => {\n    let activeItems = allItems.filter((item) => !item.done);\n    console.log(activeItems, \"inside active items\");\n    setItems(activeItems);\n  };\n  const completeHandler = () => {\n    let completedItems = allItems.filter((item) => item.done);\n    setItems(completedItems);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        {/* <form onSubmit={handleFormSubmit}> */}\n        <input\n          //  onKeyPress={handleEnter}\n          // this event handler function couldn't be found even in the original\n          // however this input type is wrapped  in a Form that has a event (handleFormsbmit)\n          // that is activating on enter(submit) to add the typed todo into our state.\n\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          autoFocus=\"\"\n          value={newItemText}\n          onChange={handleNewItemTextChange}\n          onKeyPress={handleKeyPress}\n        />\n        {/* </form> */}\n      </header>\n\n      <section className=\"main\">\n        <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {items.map((item) => (\n            <ToDo\n              key={item.id}\n              id={item.id}\n              text={item.text}\n              done={item.done}\n              onChange={() => handleChange(item)}\n              onDelete={() => handleDelete(item)}\n              onTextChanged={(text) => changeText(item, text)}\n            />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{activeItems.length}</strong> item left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <button onClick={allHandler} className=\"selected\">\n              All\n            </button>\n          </li>\n          <li>\n            <button onClick={activeHandler}>Active</button>\n          </li>\n          <li>\n            <button onClick={completeHandler}>Completed</button>\n          </li>\n        </ul>\n        <button onClick={clearCompleted} className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}","import React from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport \"./styles.css\";\n\n// this isthe best format/layout where we don't write any code in app.js\n// file but call components- so its best to keep\n// App.js file completely clean and minimal and have\n// individual files/components write all the code.\nconst App = () => (\n  <div className=\"App\">\n    <ToDoList />\n  </div>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"./styles.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}